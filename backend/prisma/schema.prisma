generator client {
  provider = "prisma-client-js"
  // optional: you can specify an explicit output path, but the default is fine:
  // output = "../node_modules/@prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleType {
  ADMIN
  TEACHER
  STUDENT
  USER
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation to Role
  roles Role[]
}

model Role {
  id     Int      @id @default(autoincrement())
  role   RoleType // ‚Üê ENUM type in Prisma
  userId Int
  user   User     @relation(fields: [userId], references: [id])
}

model Parent {
  parentId     Int     @id @default(autoincrement())
  father       String?
  mother       String?
  fatherJob    String?
  motherJob    String?
  motherNumber String?
  fatherNumber String?
  kafil        Int     @default(0)
  fatherCid    String?

  // Relation to Student
  students Student[]
}

model Student {
  studentId       Int       @id @default(autoincrement())
  firstName       String
  lastName        String
  dateOfBirth     DateTime
  gender          String
  address         String
  parentId        Int
  code            String?
  health          String?
  dateCreate      DateTime?
  dateModif       DateTime?
  lieuOfBirth     String?
  bloodType       String?
  etatCivil       String?
  cid             String?
  nationality     String?
  observation     String?
  numNumerisation String    @default("0")
  dateInscription DateTime
  photo           Bytes?
  okBlock         String    @default("N")

  // Relation to Parent
  parent Parent @relation(fields: [parentId], references: [parentId])
}

model Local {
  localId    Int       @id @default(autoincrement())
  name       String
  code       String
  dateCreate DateTime?
  dateModif  DateTime?
  NumClass   Int?

  classes classes[]
}

model classes {
  classId    Int       @id @default(autoincrement())
  ClassName  String
  code       String
  dateCreate DateTime?
  dateModif  DateTime?
  NumStudent Int
  localId    Int
  okBlock    String    @default("N")

  local Local @relation(fields: [localId], references: [localId])
}

model subject {
  subjectId   Int     @id @default(autoincrement())
  subjectName String
  totalGrads  Float
  parentId    Int
  BG          Int
  BD          Int
  okBlock     Boolean @default(false)

  parent   subject?  @relation("SubjectToParent", fields: [parentId], references: [subjectId])
  children subject[] @relation("SubjectToParent")
}

model parameter {
  paramId   Int    @id @default(autoincrement())
  paramName String @unique
  okActive Boolean @default(false)
}
